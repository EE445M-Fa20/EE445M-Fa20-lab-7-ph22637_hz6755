


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           SchPt
   15 00000000         
   16 00000000                 EXPORT           StartOS
   17 00000000                 EXPORT           ContextSwitch
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000                 EXPORT           SVC_Handler
   20 00000000         
   21 00000000         
   22 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   23 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   24 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   25 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   26 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   28 00000000         
   29 00000000         
   30 00000000         StartOS
   31 00000000         ; put your code here



ARM Macro Assembler    Page 2 


   32 00000000 4813            LDR              R0, =RunPt  ; currently running
                                                             thread
   33 00000002 6801            LDR              R1, [R0]    ; R2 = value of Run
                                                            Pt
   34 00000004 F8D1 D000       LDR              SP, [R1]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   35 00000008 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
   36 0000000C BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                            
   37 0000000E F85D CB04       POP              {R12}
   38 00000012 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   39 00000016 F85D EB04       POP              {LR}        ; start location
   40 0000001A BC02            POP              {R1}        ; discard PSR
   41 0000001C B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   42 0000001E 4770            BX               LR          ; start first threa
                                                            d
   43 00000020         ; MOV  SP,R0
   44 00000020         ; POP  {R0-R12,LR}
   45 00000020         ; CPSIE I
   46 00000020         ;   BX      LR                 ; start first thread
   47 00000020         
   48 00000020         OSStartHang
   49 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
   50 00000022         
   51 00000022         
   52 00000022         ;*******************************************************
                       *************************************************
   53 00000022         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   54 00000022         ;                                           void Context
                       Switch(void)
   55 00000022         ;
   56 00000022         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   57 00000022         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   58 00000022         ;*******************************************************
                       *************************************************
   59 00000022         
   60 00000022         ContextSwitch
   61 00000022         ; edit this code
   62 00000022 480C            LDR              R0, =NVIC_INT_CTRL
   63 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
   64 00000028 6001            STR              R1, [R0]
   65 0000002A 4770            BX               LR
   66 0000002C         ; CPSID I
   67 0000002C         ; PUSH {R0-R12,LR}
   68 0000002C         ; LDR  R0,=RunPt
   69 0000002C         ; LDR  R1,[R0]
   70 0000002C         ; STR  SP,[R1]   ;Save current SP to current TCB.SavedSP
                        
   71 0000002C         ; LDR  R1,[R1,#4]  ;The pointer points to the next TCB
   72 0000002C         ; STR  R1,[R0]   ;Point RunPt to next TCB



ARM Macro Assembler    Page 3 


   73 0000002C         ; LDR  SP,[R1]   ;Load next TCB.SavedSP to SP register
   74 0000002C         ; POP  {R0-R12,LR}
   75 0000002C         ; CPSIE I
   76 0000002C         ;    BX      LR
   77 0000002C         
   78 0000002C         
   79 0000002C         ;*******************************************************
                       *************************************************
   80 0000002C         ;                                         HANDLE PendSV 
                       EXCEPTION
   81 0000002C         ;                                     void OS_CPU_PendSV
                       Handler(void)
   82 0000002C         ;
   83 0000002C         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   84 0000002C         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   85 0000002C         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   86 0000002C         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   87 0000002C         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   88 0000002C         ;              a thread or occurs due to an interrupt or
                        exception.
   89 0000002C         ;
   90 0000002C         ;           2) Pseudo-code is:
   91 0000002C         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   92 0000002C         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   93 0000002C         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   94 0000002C         ;              d) Call OSTaskSwHook();
   95 0000002C         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   96 0000002C         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   97 0000002C         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   98 0000002C         ;              h) Restore R4-R11 from new process stack;
                       
   99 0000002C         ;              i) Perform exception return which will re
                       store remaining context.
  100 0000002C         ;
  101 0000002C         ;           3) On entry into PendSV handler:
  102 0000002C         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  103 0000002C         ;                 xPSR, PC, LR, R12, R0-R3
  104 0000002C         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  105 0000002C         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  106 0000002C         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  107 0000002C         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  108 0000002C         ;
  109 0000002C         ;           4) Since PendSV is set to lowest priority in



ARM Macro Assembler    Page 4 


                        the system (by OSStartHighRdy() above), we
  110 0000002C         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  111 0000002C         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  112 0000002C         ;*******************************************************
                       *************************************************
  113 0000002C         
  114 0000002C         PendSV_Handler
  115 0000002C         ; put your code here
  116 0000002C B672            CPSID            I
  117 0000002E E92D 0FF0       PUSH             {R4-R11}
  118 00000032 4807            LDR              R0,=RunPt
  119 00000034 6801            LDR              R1,[R0]
  120 00000036 F8C1 D000       STR              SP,[R1]
  121 0000003A 4907            LDR              R1,=SchPt
  122 0000003C 680A            LDR              R2,[R1]
  123 0000003E 6002            STR              R2,[R0]
  124 00000040 F8D2 D000       LDR              SP,[R2]
  125 00000044 E8BD 0FF0       POP              {R4-R11}
  126 00000048 B662            CPSIE            I
  127 0000004A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  128 0000004C         
  129 0000004C         
  130 0000004C         ;*******************************************************
                       *************************************************
  131 0000004C         ;                                         HANDLE SVC EXC
                       EPTION
  132 0000004C         ;                                     void OS_CPU_SVCHan
                       dler(void)
  133 0000004C         ;
  134 0000004C         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  135 0000004C         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  136 0000004C         ;           found relative to the return address saved o
                       n the stack on exception entry.
  137 0000004C         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  138 0000004C         ;*******************************************************
                       *************************************************
  139 0000004C         
  140 0000004C                 IMPORT           OS_Id
  141 0000004C                 IMPORT           OS_Kill
  142 0000004C                 IMPORT           OS_Sleep
  143 0000004C                 IMPORT           OS_Time
  144 0000004C                 IMPORT           OS_AddThread
  145 0000004C         
  146 0000004C         SVC_Handler
  147 0000004C         ; put your Lab 5 code here
  148 0000004C         
  149 0000004C         
  150 0000004C 4770            BX               LR          ; Return from excep
                                                            tion
  151 0000004E         
  152 0000004E         
  153 0000004E         



ARM Macro Assembler    Page 5 


  154 0000004E 00 00           ALIGN
  155 00000050                 END
              00000000 
              E000ED04 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4 --apcs=interw
ork --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab3 -I"C:\Users\Peng Han\AppData\L
ocal\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include" -I"C:\Users\Peng Han\AppData
\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123" --predefine="__EVA
L SETA 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 5
32" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_
RTE_ SETA 1" --list=.\osasm.lst ..\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000022

Symbol: ContextSwitch
   Definitions
      At line 60 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 48 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 49 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000002C

Symbol: PendSV_Handler
   Definitions
      At line 114 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 0000004C

Symbol: SVC_Handler
   Definitions
      At line 146 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 62 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_INT_CTRL used once
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 63 in file ..\RTOS_Labs_common\osasm.s
Comment: NVIC_PENDSVSET used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 144 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_AddThread unused
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 140 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Id unused
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 141 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Kill unused
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 142 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Sleep unused
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 143 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Time unused
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 32 in file ..\RTOS_Labs_common\osasm.s
      At line 118 in file ..\RTOS_Labs_common\osasm.s

SchPt 00000000

Symbol: SchPt
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 121 in file ..\RTOS_Labs_common\osasm.s
Comment: SchPt used once
7 symbols
356 symbols in table
